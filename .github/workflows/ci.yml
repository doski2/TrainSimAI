name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-matrix:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: [3.11, 3.12]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run unit tests (non-real)
        shell: bash
        run: python -m pytest -q -m "not real"

      - name: Run E2E harness (not real)
        shell: bash
        run: |
          echo "Running E2E harness test (not real)"
          python -m pytest -q -m "not real" tests/test_e2e_harness.py || true

      - name: Run DB healthcheck
        shell: bash
        run: |
          python -c "from pathlib import Path; Path('tmp_test_run.db').unlink(missing_ok=True)"
          python -m scripts.db_health tmp_test_run.db || (echo 'db_health failed' && exit 2)
          python -m scripts.db_health tmp_test_run.db --pretty

      - name: Run Prometheus wrapper and generate .prom
        shell: bash
        run: |
          mkdir -p artifacts
          python -c "from pathlib import Path; Path('tmp_test_run.db').unlink(missing_ok=True)"
          # create a sample control_status.json so exported .prom includes control metrics
          python -c "import json,time; from pathlib import Path; p=Path('data'); p.mkdir(parents=True,exist_ok=True); cs={'last_command_time':time.time(),'last_ack_time':time.time(),'last_command_value':0.5}; Path('data/control_status.json').write_text(json.dumps(cs), encoding='utf-8')"
          python -m scripts.db_health_prometheus tmp_test_run.db --out artifacts/trainsim_db.prom || true

      - name: Write pragmas.json for debug
        shell: bash
        run: |
          python -c "import json; from pathlib import Path; from storage.db_check import read_pragmas; pr=read_pragmas('tmp_test_run.db'); Path('artifacts').mkdir(exist_ok=True); Path('artifacts/pragmas.json').write_text(json.dumps(pr), encoding='utf-8')"

      - name: Upload artifacts directory
        uses: actions/upload-artifact@v4
        with:
          name: trainsim_artifacts
          path: artifacts/

      - name: SQLite stress test (ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          mkdir -p artifacts
          python -m scripts.sqlite_stress --db tmp_stress.db --writers 3 --readers 2 --duration 3 --interval 0.01 --out artifacts/sqlite_stress.json || true
